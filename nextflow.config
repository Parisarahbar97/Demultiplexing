/*
 * Nextflow configuration for demultiplexing pipeline (PBS Pro + Singularity)
 * minimal method = Demuxlet only
 */

nextflow.enable.dsl = 2

// ------------------------
// Default parameters 
// ------------------------
params {
  // I/O roots on the shared filesystem
  project_root      = '/home/pr422/RDS/live/Users/Parisa'

  // Inputs (directories or files your modules channel from)
  bam_dir           = "${project_root}/EPILEP/healthy/mapping/output"       // contains *_mapped/outs/possorted_genome_bam.bam
  barcodes_dir      = "${project_root}/EPILEP/healthy/mapping/output"       // contains *_mapped/outs/filtered_feature_bc_matrix/barcodes.tsv.gz
  geno_dir          = "${project_root}/vcf_per_samplepool"                  // your VCF per sample pool

  // Outputs
  outdir            = "${project_root}/demux_out_nf"                        // pipeline root out
  demux_outs        = "${params.outdir}/demuxlet"                           // demuxlet outputs
  pileup_outs       = "${params.outdir}/pileups"                            // pileups

  // Harmonization script (lives inside the repo)
  harmonize_script  = "${projectDir}/scripts/harmonize_vcf_bam.sh"

  // Demuxlet behavior
  vcf_filter        = 'biallelic_poly'  // our robust default (biallelic SNPs; polymorphic)
  tag_group         = 'CB'
  tag_umi           = 'UB'
  field             = 'GT'
  doublet_prior     = 0.10

  // Optional: directory containing <sample>_pool_donors.clean.txt
  sm_lists_dir      = "${project_root}/vcf_per_samplepool/lists"

  // Work & caches (adjust to your HPC conventions if needed)
  workdir_root      = "/home/pr422/RDS/ephemeral/parisa_tmp/NEXTFLOW"
  singularity_cache = "/home/pr422/RDS/ephemeral/parisa_tmp/NXF_SINGULARITY"
}

// Reports
report.overwrite  = true
timeline.overwrite= true
trace {
  enabled = true
}

// ------------------------
// Containers
// ------------------------
// We keep one container for bcftools/samtools (harmonize & QC)
// and one for popscle (dsc-pileup & demuxlet).
// If your HPC cannot pull from DockerHub, convert to .sif and point to file:// paths.
def CT_GENOTYPE = 'docker://parisa/genotype:2.6'
def CT_POPSCLE  = 'docker://parisa/demux:2.1'

// ------------------------
// Profiles
// ------------------------
profiles {

  /* Local dev / dry-runs on login node (small files only) */
  standard {
    process.executor = 'local'
    singularity.enabled = false
    docker.enabled = true
    docker.runOptions = "-u \$(id -u):\$(id -g)"
    params.outdir = "${params.project_root}/demux_out_nf_local"
  }

  /* HPC profile: PBS Pro + Singularity – mirrors supervisor’s patterns */
  imperial {
    docker.enabled       = false
    singularity.enabled  = true
    singularity.autoMounts = true
    singularity.cacheDir = params.singularity_cache

    workDir = params.workdir_root
    executor {
      name        = 'pbspro'
    }

    process {
      executor     = 'pbspro'
      maxRetries   = 5
      maxErrors    = '-1'
      queue        = { 4 * task.attempt > 8 ? 'v1_small72' : 'v1_small24' }
      cpus         = { 1 * task.attempt }
      memory       = { 6.GB * task.attempt }
      time         = { 4.h * task.attempt }

      // --- harmonization / header-fix / filtering type steps
      withName: /(?i)harmonize.*vcf.*bam/ {
        queue    = 'v1_medium72'
        cpus     = { 8 * task.attempt }
        memory   = { 24.GB * task.attempt }
        time     = { 1.h * task.attempt }
        container= CT_GENOTYPE          // bcftools + samtools
        publishDir = [ path: "${params.outdir}/harmonized", mode: 'copy' ]
      }

      // --- dsc-pileup (heavy I/O compute)
      withName: /(?i)dsc[_-]?pileup/ {
        queue    = { 200 * task.attempt < 921 ? 'v1_medium72' : 'v1_largemem72' }
        cpus     = { 12 * task.attempt }
        memory   = { 96.GB * task.attempt }
        time     = { 8.h * task.attempt }
        container= CT_POPSCLE           // popscle
        publishDir = [ path: params.pileup_outs, mode: 'copy' ]
      }

      // --- demuxlet (heavy compute)
      withName: /(?i)run[_-]?demuxlet/ {
        queue    = { 200 * task.attempt < 921 ? 'v1_medium72' : 'v1_largemem72' }
        cpus     = { 12 * task.attempt }
        memory   = { 96.GB * task.attempt }
        time     = { 8.h * task.attempt }
        container= CT_POPSCLE           // popscle
        publishDir = [ path: params.demux_outs, mode: 'copy' ]
      }

      // --- QC/summary (light)
      withName: /(?i)qc[_-]?demuxlet/ {
        queue    = 'v1_small72'
        cpus     = 2
        memory   = 8.GB
        time     = 1.h
        container= CT_GENOTYPE          // awk/grep/bcftools available
        publishDir = [ path: "${params.outdir}/qc", mode: 'copy' ]
      }
    }
  }
}

// ------------------------
// Manifest (optional)
// ------------------------
manifest {
  name        = 'parisa-demuxlet'
  author      = 'Parisa'
  description = 'Minimal demuxlet (popscle) pipeline with BAM↔VCF harmonization and QC'
  version     = '1.0.0'
}

/*
 * Demultiplexing pipeline configuration
 * Profiles aligned to supervisor style:
 *   - imperial : PBS Pro + Singularity (HPC)
 *   - dsi      : Docker (no scheduler; new server)
 *   - standard : local dev with Docker
 *   - offline  : heavy local Docker (optional)
 *   - slurm    : optional SLURM profile (kept minimal)
 */

nextflow.enable.dsl = 2

// ------------------------
// Parameters (paths match your tree)
// ------------------------
params {
  // Shared root
  project_root      = '/home/pr422/RDS/live/Users/Parisa'

  // Inputs
  bam_dir           = "${project_root}/EPILEP/healthy/mapping/output"    // *_mapped/outs/possorted_genome_bam.bam
  barcodes_dir      = "${project_root}/EPILEP/healthy/mapping/output"    // *_mapped/outs/filtered_feature_bc_matrix/barcodes.tsv.gz
  geno_dir          = "${project_root}/vcf_per_samplepool"               // per-sample-pool VCFs (harmonized/clean)

  // Outputs
  outdir            = "${project_root}/demux_out_nf"
  demux_outs        = "${params.outdir}/demuxlet"
  pileup_outs       = "${params.outdir}/pileups"

  // Script inside this repo
  harmonize_script  = "${projectDir}/scripts/harmonize_vcf_bam.sh"

  // Demuxlet behaviour (your proven choices)
  vcf_filter        = 'biallelic_poly'
  tag_group         = 'CB'
  tag_umi           = 'UB'
  field             = 'GT'
  doublet_prior     = 0.10

  // Optional: donor lists per pool
  sm_lists_dir      = "${project_root}/vcf_per_samplepool/lists"

  // Work / caches
  workdir_root      = "/home/pr422/RDS/ephemeral/parisa_tmp/NEXTFLOW"
  singularity_cache = "/home/pr422/RDS/ephemeral/parisa_tmp/NXF_SINGULARITY"

  // Optional default samples CSV (CLI can override)
  samples           = "${projectDir}/examples/samples.csv"
}

// Reports / tracing
report.overwrite   = true
timeline.overwrite = true
trace { enabled = true }

// ------------------------
// Containers (same images you used)
// ------------------------
def CT_GENOTYPE = 'docker://parisa/genotype:2.6'   // bcftools/samtools/tabix + harmonize
def CT_POPSCLE  = 'docker://parisa/demux:2.1'      // popscle (dsc-pileup + demuxlet)

// ------------------------
// Global process labels (mirror supervisor style)
//   Add these labels in processes if you wish, but we also keep
//   `withName` fallbacks so you don't have to touch your modules.
// ------------------------
// Suggested label mapping for your modules:
//   - harmonize_vcf_bam : process_low   + label 'genotype'
//   - dsc_pileup        : process_high  + label 'popscle'
//   - run_demuxlet      : process_high  + label 'popscle'
//   - qc_demuxlet       : process_reports + label 'genotype'

// ------------------------
// Profiles
// ------------------------
profiles {

  // ---------- Local dev (small tests)
  standard {
    process.executor    = 'local'
    docker.enabled      = true
    singularity.enabled = false
    docker.runOptions   = "-u \$(id -u):\$(id -g)"
    params.outdir       = "${params.project_root}/demux_out_nf_local"

    process {
      withName: /(?i)harmonize.*vcf.*bam/ { container = CT_GENOTYPE }
      withName: /(?i)dsc[_-]?pileup/      { container = CT_POPSCLE  }
      withName: /(?i)run[_-]?demuxlet/    { container = CT_POPSCLE  }
      withName: /(?i)qc[_-]?demuxlet/     { container = CT_GENOTYPE }
    }
  }

  // ---------- New server (no scheduler): Docker
  dsi {
    docker.enabled       = true
    singularity.enabled  = false
    process.executor     = 'local'
    docker.runOptions    = "-u \$(id -u):\$(id -g)"
    workDir              = params.workdir_root

    process {
      // Keep container mapping by name (no code edits required)
      withName: /(?i)harmonize.*vcf.*bam/ { container = CT_GENOTYPE }
      withName: /(?i)dsc[_-]?pileup/      { container = CT_POPSCLE  }
      withName: /(?i)run[_-]?demuxlet/    { container = CT_POPSCLE  }
      withName: /(?i)qc[_-]?demuxlet/     { container = CT_GENOTYPE }

      // If you later add labels in processes, resource classes below apply:
      withLabel: genotype       { container = CT_GENOTYPE }
      withLabel: popscle        { container = CT_POPSCLE  }

      withLabel: process_single { cpus = 1;  memory = 6.GB;  time = 4.h }
      withLabel: process_low    { cpus = 2;  memory = 12.GB; time = 2.h }
      withLabel: process_medium { cpus = 9;  memory = 36.GB; time = 9.h }
      withLabel: process_high   { cpus = 12; memory = 72.GB; time = 14.h }
      withLabel: process_reports{ cpus = 16; memory = 30.GB; time = 1.h }
    }
  }

  // ---------- Imperial HPC (PBS Pro + Singularity) — matches supervisor style
  imperial {
    docker.enabled          = false
    singularity.enabled     = true
    singularity.autoMounts  = true
    singularity.cacheDir    = params.singularity_cache
    workDir                 = params.workdir_root

    process {
      executor      = 'pbspro'
      errorStrategy = 'retry'
      maxRetries    = 5
      maxErrors     = '-1'
      queue         = { 4 * task.attempt > 8 ? 'v1_small72' : 'v1_small24' }
      cpus          = { 1 * task.attempt }
      memory        = { 6.GB * task.attempt }
      time          = { 4.h * task.attempt }

      // Container mapping by LABEL (preferred)
      withLabel: genotype { container = CT_GENOTYPE }
      withLabel: popscle  { container = CT_POPSCLE  }

      // Resource classes (labels) — identical structure to supervisor config
      withLabel: process_single { cpus = 1;  memory = { 6.GB  * task.attempt }; time = { 4.h  * task.attempt } }
      withLabel: process_low    { cpus = { 2 * task.attempt }; memory = { 12.GB * task.attempt }; time = { 2.h  * task.attempt } }
      withLabel: process_medium { queue = 'v1_medium72'; cpus = { 9 * task.attempt };  memory = { 36.GB * task.attempt }; time = { 9.h  * task.attempt } }
      withLabel: process_high   { queue = 'v1_medium72'; cpus = { 12 * task.attempt }; memory = { 72.GB * task.attempt }; time = { 14.h * task.attempt } }
      withLabel: process_reports{ queue = 'v1_medium24'; cpus = 16; memory = '30.GB'; time = '1.h' }

      // Fallbacks by NAME so your current modules work even without labels
      withName: /(?i)harmonize.*vcf.*bam/ {
        queue     = 'v1_medium72'
        cpus      = { 8 * task.attempt }
        memory    = { 24.GB * task.attempt }
        time      = { 1.h * task.attempt }
        container = CT_GENOTYPE
        publishDir = [ path: "${params.outdir}/harmonized", mode: 'copy' ]
      }
      withName: /(?i)dsc[_-]?pileup/ {
        queue     = { 200 * task.attempt < 921 ? 'v1_medium72' : 'v1_largemem72' }
        cpus      = { 12 * task.attempt }
        memory    = { 96.GB * task.attempt }
        time      = { 8.h * task.attempt }
        container = CT_POPSCLE
        publishDir = [ path: params.pileup_outs, mode: 'copy' ]
      }
      withName: /(?i)run[_-]?demuxlet/ {
        queue     = { 200 * task.attempt < 921 ? 'v1_medium72' : 'v1_largemem72' }
        cpus      = { 12 * task.attempt }
        memory    = { 96.GB * task.attempt }
        time      = { 8.h * task.attempt }
        container = CT_POPSCLE
        publishDir = [ path: params.demux_outs, mode: 'copy' ]
      }
      withName: /(?i)qc[_-]?demuxlet/ {
        queue     = 'v1_small72'
        cpus      = 2
        memory    = 8.GB
        time      = 1.h
        container = CT_GENOTYPE
        publishDir = [ path: "${params.outdir}/qc", mode: 'copy' ]
      }
    }
  }

  // ---------- Optional heavy local (supervisor has 'offline')
  offline {
    docker.enabled      = true
    singularity.enabled = false
    process.executor    = 'local'
    process {
      cpus      = 100
      memory    = '200 GB'
      maxForks  = 16

      withLabel: process_single { cpus = 1;  memory = { 6.GB  * task.attempt }; time = { 4.h  * task.attempt } }
      withLabel: process_low    { cpus = { 2 * task.attempt }; memory = { 12.GB * task.attempt }; time = { 2.h  * task.attempt } }
      withLabel: process_medium { cpus = { 9 * task.attempt }; memory = { 36.GB * task.attempt }; time = { 9.h  * task.attempt } }
      withLabel: process_high   { cpus = { 12 * task.attempt }; memory = { 72.GB * task.attempt }; time = { 14.h * task.attempt } }
      withLabel: process_reports{ cpus = 16; memory = '30.GB'; time = '1.h' }

      withName: /(?i)harmonize.*vcf.*bam/ { container = CT_GENOTYPE }
      withName: /(?i)dsc[_-]?pileup/      { container = CT_POPSCLE  }
      withName: /(?i)run[_-]?demuxlet/    { container = CT_POPSCLE  }
      withName: /(?i)qc[_-]?demuxlet/     { container = CT_GENOTYPE }
    }
  }

  // ---------- Optional SLURM profile stub (kept minimal)
  slurm {
    docker.enabled      = true
    singularity.enabled = false
    process.executor    = 'slurm'
    process.queue       = 'debug'

    process {
      withName: /(?i)harmonize.*vcf.*bam/ { container = CT_GENOTYPE }
      withName: /(?i)dsc[_-]?pileup/      { container = CT_POPSCLE  }
      withName: /(?i)run[_-]?demuxlet/    { container = CT_POPSCLE  }
      withName: /(?i)qc[_-]?demuxlet/     { container = CT_GENOTYPE }
    }
  }
}

// ------------------------
// Manifest
// ------------------------
manifest {
  name        = 'parisa-demuxlet'
  author      = 'Parisa'
  description = 'Demuxlet pipeline (harmonize + dsc-pileup + demuxlet + QC)'
  version     = '1.0.0'
}
